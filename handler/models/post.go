// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Post post
//
// swagger:model Post
type Post struct {

	// author
	// Example: Author 1
	// Required: true
	Author string `json:"author"`

	// content
	// Example: Quaerat sit dolorem velit. Ipsum non tempora magnam neque tempora. Tempora dolorem adipisci tempora neque labore. Dolorem sed dolore sed. Voluptatem consectetur dolor voluptatem. Quiquia adipisci voluptatem modi dolore. Dolor etincidunt neque consectetur dolor. Numquam etincidunt voluptatem sit amet tempora. Modi dolorem sed magnam consectetur. Dolor dolorem est amet magnam velit.
	// Required: true
	Content string `json:"content"`

	// id
	// Example: 1
	ID int64 `json:"id,omitempty"`

	// title
	// Example: Title 1
	// Required: true
	Title string `json:"title"`
}

// Validate validates this post
func (m *Post) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Post) validateAuthor(formats strfmt.Registry) error {

	if err := validate.RequiredString("author", "body", m.Author); err != nil {
		return err
	}

	return nil
}

func (m *Post) validateContent(formats strfmt.Registry) error {

	if err := validate.RequiredString("content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

func (m *Post) validateTitle(formats strfmt.Registry) error {

	if err := validate.RequiredString("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post based on context it is used
func (m *Post) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Post) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Post) UnmarshalBinary(b []byte) error {
	var res Post
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
